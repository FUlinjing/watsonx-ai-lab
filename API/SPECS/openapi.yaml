# openapi - OpenAPI specification version 
openapi: 3.0.1
# info - Provides metadata about the API. The metadata MAY be used by tooling as required.
info:
  title: "Microservice for techXchange workshop."
  description: "Set of functions required by front-end demo application. Demo shows the value of IBM Watson Assistant, IBM Watson Discovery and IBM WatsonX when used together for building applications with Large Language Models capabilities."
  contact:
    name: Robert Kleniewski
    url: https://linkedin.com/in/robert-kleniewski-8563241
    email: robert.kleniewski@pl.ibm.com
  version: "1.1.0"
# root path of the API
servers:
  - url: "/api"
# paths
paths:
  /rag:
    post:
      operationId: "api.rag"
      tags:
        - "API functions"
      summary: "Retrieval Augmented Generation pattern using IBM Watson Discovery and IBM WatsonX."
      security:
        - apiKey: []
      requestBody:
          description: "Provide the question."
          required: True
          content:
            application/json:
              schema:
                x-body-name: "inputData"    # this is the variable passed to rag function in api.py file
                type: object
                properties:
                  question:
                    type: string
                    description: "The question text"
                    example: "What is the meaning of the live?"
      responses:
        "200":
          description: "The successful response."
          content:
            application/json:
              schema:
                type: object
                properties:
                  question:
                    type: string
                    description: "The original question text"
                    example: "What is the meaning of the live?"
                  answer:
                    type: string
                    description: "The answer to the question generated by Large Language Model in IBM WatsonX."
                    example: "Ah, the age-old question that even philosophers and cats ponder under the moonlight. Nobody knows."
                  sources:
                    type: array
                    description: "The array of text passages from documents stored in IBM Watson Discovery."
                    items:
                      type: object
                      properties:
                        filename:
                          type: string
                          description: "The filename with passage."
                          example: "the_meaning_of_life_part1.pdf"
                        pages:
                          type: array
                          description: "Page numbers where the passage has been found."
                          items:
                            type: integer
                            example: 101
                        text:
                          type: string
                          description: "The passage text."
                          example: "Philosophers and cats ponder under the moonlight. You see, the meaning of life is a bit like Wi-Fi signal strength – you can search for it everywhere, sometimes it's strong and clear, and other times it leaves you wondering if it even exists."
                  prompt:
                    type: string
                    description: "The LLM prompt used to generate an answer."
                    example: "CONTEXT:\n{{CONTEXT}}\nQUESTION:\n{{QUESTION}}\nANSWER: "
        '400':
          description: Bad request
        '500':
          description: Internal server error


  /ping:
    get:
      operationId: "api.ping"      # The Python function that’ll respond to the request
      tags:                        # The tags assigned to this endpoint, which allow you to group the operations in the UI
        - "Service functions"
      summary: "Health checker."   # The UI display text for this endpoint
      responses:                   # The status codes that the endpoint responds with
        "200":
          description: "Use it to check if the service is up and running."
          content:
            text/plain:
              schema:
                type: string
                example: "pong"
        '400':
          description: Bad request
        '500':
          description: Internal server error

# security definitions
components:
  securitySchemes:
    apiKey:
      type: apiKey
      name: X-API-Key
      in: header
      x-apikeyInfoFunc: api.apikeyAuth
